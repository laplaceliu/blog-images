[
  {
    "slug": "red-black-tree",
    "id": "cc7eda73-12a0-40d0-83d8-7329464779a1",
    "type": "blog",
    "title": "红黑树详解与C++实现",
    "author": "laplaceliu",
    "publishDate": "2020-02-27",
    "description": "红黑树是一种自平衡的二叉搜索树，它通过特定的规则来保持树的平衡，从而保证最坏情况下的操作时间复杂度为O(log n)。下面我将详细介绍红黑树的性质和操作，并使用现代C++（使用智能指针）实现它。",
    "categories": [
      "数据结构与算法"
    ],
    "order": 3,
    "tags": [
      "C++",
      "算法",
      "红黑树",
      "数据结构"
    ],
    "image": null,
    "draft": false,
    "relatedPosts": []
  },
  {
    "slug": "sample",
    "id": "cc7eda73-12a0-40d0-83d8-7329464779a1",
    "type": "blog",
    "title": "MDX 功能全面展示",
    "author": "O. Wolfson",
    "publishDate": "2025-02-27",
    "description": "这篇文章展示了MDX的所有主要功能和用法",
    "categories": [
      "技术教程"
    ],
    "order": 3,
    "tags": [
      "accordion",
      "shadcn"
    ],
    "modifiedDate": "2025-04-27T22:07:30.693Z",
    "image": null,
    "draft": false,
    "relatedPosts": []
  }
]